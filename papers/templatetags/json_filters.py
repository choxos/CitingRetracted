import json
from datetime import date, datetime
from django import template
from django.utils.safestring import mark_safe
from urllib.parse import urlencode
import math
import logging

logger = logging.getLogger(__name__)

register = template.Library()

@register.filter
def map(queryset, field_name):
    """
    Extract a specific field from each object in a queryset/list.
    Usage: {{ queryset|map:"field_name" }}
    """
    try:
        if not queryset:
            return []
        
        result = []
        for obj in queryset:
            if hasattr(obj, field_name):
                value = getattr(obj, field_name)
                result.append(value)
            elif isinstance(obj, dict) and field_name in obj:
                result.append(obj[field_name])
        
        return result
    except Exception as e:
        # Return empty list if something goes wrong
        return []

@register.filter
def safe_floatformat(value, arg=None):
    """
    Safe version of floatformat that handles None, NaN, and infinity values.
    Usage: {{ value|safe_floatformat:2 }}
    """
    logger.debug(f"safe_floatformat called with value: {value}, arg: {arg}")
    try:
        # Handle None values
        if value is None:
            logger.debug("safe_floatformat: value is None, returning '0'")
            return "0"
        
        # Convert to float if it's not already
        if isinstance(value, str):
            value = float(value)
        
        # Handle NaN and infinity
        if math.isnan(value) or math.isinf(value):
            logger.debug(f"safe_floatformat: value is NaN or Inf ({value}), returning '0'")
            return "0"
        
        # Use Django's built-in floatformat for valid numbers
        from django.template.defaultfilters import floatformat
        result = floatformat(value, arg)
        logger.debug(f"safe_floatformat: successfully formatted {value} to {result}")
        return result
        
    except (ValueError, TypeError, OverflowError) as e:
        # Return "0" for any conversion errors
        logger.debug(f"safe_floatformat: error formatting {value}: {e}, returning '0'")
        return "0"

@register.filter
def safe_json(value):
    """
    Safely serialize a value to JSON, handling None values and other edge cases
    that might cause JavaScript syntax errors.
    """
    def json_serializer(obj):
        """Custom JSON serializer for datetime and other objects"""
        if isinstance(obj, (datetime, date)):
            return obj.isoformat()
        elif obj is None:
            return None
        return str(obj)
    
    try:
        # Ensure the value is not None
        if value is None:
            return mark_safe('null')
        
        # Handle empty lists and dicts
        if isinstance(value, list) and not value:
            return mark_safe('[]')
        if isinstance(value, dict) and not value:
            return mark_safe('{}')
        
        # Serialize with custom serializer
        json_str = json.dumps(value, default=json_serializer, ensure_ascii=False)
        return mark_safe(json_str)
    except Exception as e:
        # If JSON serialization fails, return a safe fallback
        return mark_safe('null')

@register.filter
def safe_json_with_fallback(value, fallback='null'):
    """
    Safely serialize a value to JSON with a custom fallback value.
    """
    try:
        if value is None:
            return mark_safe(fallback)
        return safe_json(value)
    except:
        return mark_safe(fallback)

@register.simple_tag(takes_context=True)
def url_replace(context, **kwargs):
    """Replace or add URL parameters while preserving existing ones."""
    request = context['request']
    query_dict = request.GET.copy()
    
    for key, value in kwargs.items():
        if value is None:
            query_dict.pop(key, None)
        else:
            query_dict[key] = value
    
    return '?' + urlencode(query_dict) 

@register.filter
def country_emoji(country_name):
    """
    Get flag emoji for a country name.
    Returns empty string if country not found.
    Usage: {{ country|country_emoji }}
    """
    if not country_name:
        return ""
    
    # Normalize country name for lookup
    country_clean = country_name.strip().lower()
    
    # Comprehensive country to flag emoji mapping (270+ countries and territories)
    country_flags = {
        # A
        'ascension island': 'ğŸ‡¦ğŸ‡¨',
        'andorra': 'ğŸ‡¦ğŸ‡©',
        'united arab emirates': 'ğŸ‡¦ğŸ‡ª',
        'uae': 'ğŸ‡¦ğŸ‡ª',
        'afghanistan': 'ğŸ‡¦ğŸ‡«',
        'antigua & barbuda': 'ğŸ‡¦ğŸ‡¬',
        'antigua and barbuda': 'ğŸ‡¦ğŸ‡¬',
        'anguilla': 'ğŸ‡¦ğŸ‡®',
        'albania': 'ğŸ‡¦ğŸ‡±',
        'armenia': 'ğŸ‡¦ğŸ‡²',
        'angola': 'ğŸ‡¦ğŸ‡´',
        'antarctica': 'ğŸ‡¦ğŸ‡¶',
        'argentina': 'ğŸ‡¦ğŸ‡·',
        'american samoa': 'ğŸ‡¦ğŸ‡¸',
        'austria': 'ğŸ‡¦ğŸ‡¹',
        'australia': 'ğŸ‡¦ğŸ‡º',
        'aruba': 'ğŸ‡¦ğŸ‡¼',
        'Ã¥land islands': 'ğŸ‡¦ğŸ‡½',
        'aland islands': 'ğŸ‡¦ğŸ‡½',
        'azerbaijan': 'ğŸ‡¦ğŸ‡¿',
        
        # B
        'bosnia & herzegovina': 'ğŸ‡§ğŸ‡¦',
        'bosnia and herzegovina': 'ğŸ‡§ğŸ‡¦',
        'bosnia': 'ğŸ‡§ğŸ‡¦',
        'barbados': 'ğŸ‡§ğŸ‡§',
        'bangladesh': 'ğŸ‡§ğŸ‡©',
        'belgium': 'ğŸ‡§ğŸ‡ª',
        'burkina faso': 'ğŸ‡§ğŸ‡«',
        'bulgaria': 'ğŸ‡§ğŸ‡¬',
        'bahrain': 'ğŸ‡§ğŸ‡­',
        'burundi': 'ğŸ‡§ğŸ‡®',
        'benin': 'ğŸ‡§ğŸ‡¯',
        'st. barthÃ©lemy': 'ğŸ‡§ğŸ‡±',
        'saint barthÃ©lemy': 'ğŸ‡§ğŸ‡±',
        'st barthelemy': 'ğŸ‡§ğŸ‡±',
        'bermuda': 'ğŸ‡§ğŸ‡²',
        'brunei': 'ğŸ‡§ğŸ‡³',
        'bolivia': 'ğŸ‡§ğŸ‡´',
        'caribbean netherlands': 'ğŸ‡§ğŸ‡¶',
        'brazil': 'ğŸ‡§ğŸ‡·',
        'bahamas': 'ğŸ‡§ğŸ‡¸',
        'bhutan': 'ğŸ‡§ğŸ‡¹',
        'bouvet island': 'ğŸ‡§ğŸ‡»',
        'botswana': 'ğŸ‡§ğŸ‡¼',
        'belarus': 'ğŸ‡§ğŸ‡¾',
        'belize': 'ğŸ‡§ğŸ‡¿',
        
        # C
        'canada': 'ğŸ‡¨ğŸ‡¦',
        'cocos (keeling) islands': 'ğŸ‡¨ğŸ‡¨',
        'cocos islands': 'ğŸ‡¨ğŸ‡¨',
        'keeling islands': 'ğŸ‡¨ğŸ‡¨',
        'congo-kinshasa': 'ğŸ‡¨ğŸ‡©',
        'democratic republic of congo': 'ğŸ‡¨ğŸ‡©',
        'drc': 'ğŸ‡¨ğŸ‡©',
        'dr congo': 'ğŸ‡¨ğŸ‡©',
        'central african republic': 'ğŸ‡¨ğŸ‡«',
        'congo-brazzaville': 'ğŸ‡¨ğŸ‡¬',
        'congo': 'ğŸ‡¨ğŸ‡¬',
        'republic of congo': 'ğŸ‡¨ğŸ‡¬',
        'switzerland': 'ğŸ‡¨ğŸ‡­',
        'cÃ´te d\'ivoire': 'ğŸ‡¨ğŸ‡®',
        'cote d\'ivoire': 'ğŸ‡¨ğŸ‡®',
        'ivory coast': 'ğŸ‡¨ğŸ‡®',
        'cook islands': 'ğŸ‡¨ğŸ‡°',
        'chile': 'ğŸ‡¨ğŸ‡±',
        'cameroon': 'ğŸ‡¨ğŸ‡²',
        'china': 'ğŸ‡¨ğŸ‡³',
        'colombia': 'ğŸ‡¨ğŸ‡´',
        'clipperton island': 'ğŸ‡¨ğŸ‡µ',
        'sark': 'ğŸ‡¨ğŸ‡¶',
        'costa rica': 'ğŸ‡¨ğŸ‡·',
        'cuba': 'ğŸ‡¨ğŸ‡º',
        'cape verde': 'ğŸ‡¨ğŸ‡»',
        'curaÃ§ao': 'ğŸ‡¨ğŸ‡¼',
        'curacao': 'ğŸ‡¨ğŸ‡¼',
        'christmas island': 'ğŸ‡¨ğŸ‡½',
        'cyprus': 'ğŸ‡¨ğŸ‡¾',
        'czechia': 'ğŸ‡¨ğŸ‡¿',
        'czech republic': 'ğŸ‡¨ğŸ‡¿',
        
        # D
        'germany': 'ğŸ‡©ğŸ‡ª',
        'diego garcia': 'ğŸ‡©ğŸ‡¬',
        'djibouti': 'ğŸ‡©ğŸ‡¯',
        'denmark': 'ğŸ‡©ğŸ‡°',
        'dominica': 'ğŸ‡©ğŸ‡²',
        'dominican republic': 'ğŸ‡©ğŸ‡´',
        'algeria': 'ğŸ‡©ğŸ‡¿',
        
        # E
        'ceuta & melilla': 'ğŸ‡ªğŸ‡¦',
        'ceuta and melilla': 'ğŸ‡ªğŸ‡¦',
        'ecuador': 'ğŸ‡ªğŸ‡¨',
        'estonia': 'ğŸ‡ªğŸ‡ª',
        'egypt': 'ğŸ‡ªğŸ‡¬',
        'western sahara': 'ğŸ‡ªğŸ‡­',
        'eritrea': 'ğŸ‡ªğŸ‡·',
        'spain': 'ğŸ‡ªğŸ‡¸',
        'ethiopia': 'ğŸ‡ªğŸ‡¹',
        'european union': 'ğŸ‡ªğŸ‡º',
        
        # F
        'finland': 'ğŸ‡«ğŸ‡®',
        'fiji': 'ğŸ‡«ğŸ‡¯',
        'falkland islands': 'ğŸ‡«ğŸ‡°',
        'micronesia': 'ğŸ‡«ğŸ‡²',
        'faroe islands': 'ğŸ‡«ğŸ‡´',
        'france': 'ğŸ‡«ğŸ‡·',
        
        # G
        'gabon': 'ğŸ‡¬ğŸ‡¦',
        'united kingdom': 'ğŸ‡¬ğŸ‡§',
        'uk': 'ğŸ‡¬ğŸ‡§',
        'britain': 'ğŸ‡¬ğŸ‡§',
        'great britain': 'ğŸ‡¬ğŸ‡§',
        'grenada': 'ğŸ‡¬ğŸ‡©',
        'georgia': 'ğŸ‡¬ğŸ‡ª',
        'french guiana': 'ğŸ‡¬ğŸ‡«',
        'guernsey': 'ğŸ‡¬ğŸ‡¬',
        'ghana': 'ğŸ‡¬ğŸ‡­',
        'gibraltar': 'ğŸ‡¬ğŸ‡®',
        'greenland': 'ğŸ‡¬ğŸ‡±',
        'gambia': 'ğŸ‡¬ğŸ‡²',
        'guinea': 'ğŸ‡¬ğŸ‡³',
        'guadeloupe': 'ğŸ‡¬ğŸ‡µ',
        'equatorial guinea': 'ğŸ‡¬ğŸ‡¶',
        'greece': 'ğŸ‡¬ğŸ‡·',
        'south georgia & south sandwich islands': 'ğŸ‡¬ğŸ‡¸',
        'guatemala': 'ğŸ‡¬ğŸ‡¹',
        'guam': 'ğŸ‡¬ğŸ‡º',
        'guinea-bissau': 'ğŸ‡¬ğŸ‡¼',
        'guyana': 'ğŸ‡¬ğŸ‡¾',
        
        # H
        'hong kong sar china': 'ğŸ‡­ğŸ‡°',
        'hong kong': 'ğŸ‡­ğŸ‡°',
        'heard & mcdonald islands': 'ğŸ‡­ğŸ‡²',
        'honduras': 'ğŸ‡­ğŸ‡³',
        'croatia': 'ğŸ‡­ğŸ‡·',
        'haiti': 'ğŸ‡­ğŸ‡¹',
        'hungary': 'ğŸ‡­ğŸ‡º',
        
        # I
        'canary islands': 'ğŸ‡®ğŸ‡¨',
        'indonesia': 'ğŸ‡®ğŸ‡©',
        'ireland': 'ğŸ‡®ğŸ‡ª',
        'israel': 'ğŸ‡®ğŸ‡±',
        'isle of man': 'ğŸ‡®ğŸ‡²',
        'india': 'ğŸ‡®ğŸ‡³',
        'british indian ocean territory': 'ğŸ‡®ğŸ‡´',
        'iraq': 'ğŸ‡®ğŸ‡¶',
        'iran': 'ğŸ‡®ğŸ‡·',
        'iceland': 'ğŸ‡®ğŸ‡¸',
        'italy': 'ğŸ‡®ğŸ‡¹',
        
        # J
        'jersey': 'ğŸ‡¯ğŸ‡ª',
        'jamaica': 'ğŸ‡¯ğŸ‡²',
        'jordan': 'ğŸ‡¯ğŸ‡´',
        'japan': 'ğŸ‡¯ğŸ‡µ',
        
        # K
        'kenya': 'ğŸ‡°ğŸ‡ª',
        'kyrgyzstan': 'ğŸ‡°ğŸ‡¬',
        'cambodia': 'ğŸ‡°ğŸ‡­',
        'kiribati': 'ğŸ‡°ğŸ‡®',
        'comoros': 'ğŸ‡°ğŸ‡²',
        'st. kitts & nevis': 'ğŸ‡°ğŸ‡³',
        'saint kitts and nevis': 'ğŸ‡°ğŸ‡³',
        'north korea': 'ğŸ‡°ğŸ‡µ',
        'south korea': 'ğŸ‡°ğŸ‡·',
        'korea': 'ğŸ‡°ğŸ‡·',
        'kuwait': 'ğŸ‡°ğŸ‡¼',
        'cayman islands': 'ğŸ‡°ğŸ‡¾',
        'kazakhstan': 'ğŸ‡°ğŸ‡¿',
        
        # L
        'laos': 'ğŸ‡±ğŸ‡¦',
        'lebanon': 'ğŸ‡±ğŸ‡§',
        'st. lucia': 'ğŸ‡±ğŸ‡¨',
        'saint lucia': 'ğŸ‡±ğŸ‡¨',
        'liechtenstein': 'ğŸ‡±ğŸ‡®',
        'sri lanka': 'ğŸ‡±ğŸ‡°',
        'liberia': 'ğŸ‡±ğŸ‡·',
        'lesotho': 'ğŸ‡±ğŸ‡¸',
        'lithuania': 'ğŸ‡±ğŸ‡¹',
        'luxembourg': 'ğŸ‡±ğŸ‡º',
        'latvia': 'ğŸ‡±ğŸ‡»',
        'libya': 'ğŸ‡±ğŸ‡¾',
        
        # M
        'morocco': 'ğŸ‡²ğŸ‡¦',
        'monaco': 'ğŸ‡²ğŸ‡¨',
        'moldova': 'ğŸ‡²ğŸ‡©',
        'montenegro': 'ğŸ‡²ğŸ‡ª',
        'st. martin': 'ğŸ‡²ğŸ‡«',
        'saint martin': 'ğŸ‡²ğŸ‡«',
        'madagascar': 'ğŸ‡²ğŸ‡¬',
        'marshall islands': 'ğŸ‡²ğŸ‡­',
        'north macedonia': 'ğŸ‡²ğŸ‡°',
        'macedonia': 'ğŸ‡²ğŸ‡°',
        'mali': 'ğŸ‡²ğŸ‡±',
        'myanmar (burma)': 'ğŸ‡²ğŸ‡²',
        'myanmar': 'ğŸ‡²ğŸ‡²',
        'burma': 'ğŸ‡²ğŸ‡²',
        'mongolia': 'ğŸ‡²ğŸ‡³',
        'macao sar china': 'ğŸ‡²ğŸ‡´',
        'macao': 'ğŸ‡²ğŸ‡´',
        'macau': 'ğŸ‡²ğŸ‡´',
        'northern mariana islands': 'ğŸ‡²ğŸ‡µ',
        'martinique': 'ğŸ‡²ğŸ‡¶',
        'mauritania': 'ğŸ‡²ğŸ‡·',
        'montserrat': 'ğŸ‡²ğŸ‡¸',
        'malta': 'ğŸ‡²ğŸ‡¹',
        'mauritius': 'ğŸ‡²ğŸ‡º',
        'maldives': 'ğŸ‡²ğŸ‡»',
        'malawi': 'ğŸ‡²ğŸ‡¼',
        'mexico': 'ğŸ‡²ğŸ‡½',
        'malaysia': 'ğŸ‡²ğŸ‡¾',
        'mozambique': 'ğŸ‡²ğŸ‡¿',
        
        # N
        'namibia': 'ğŸ‡³ğŸ‡¦',
        'new caledonia': 'ğŸ‡³ğŸ‡¨',
        'niger': 'ğŸ‡³ğŸ‡ª',
        'norfolk island': 'ğŸ‡³ğŸ‡«',
        'nigeria': 'ğŸ‡³ğŸ‡¬',
        'nicaragua': 'ğŸ‡³ğŸ‡®',
        'netherlands': 'ğŸ‡³ğŸ‡±',
        'norway': 'ğŸ‡³ğŸ‡´',
        'nepal': 'ğŸ‡³ğŸ‡µ',
        'nauru': 'ğŸ‡³ğŸ‡·',
        'niue': 'ğŸ‡³ğŸ‡º',
        'new zealand': 'ğŸ‡³ğŸ‡¿',
        
        # O
        'oman': 'ğŸ‡´ğŸ‡²',
        
        # P
        'panama': 'ğŸ‡µğŸ‡¦',
        'peru': 'ğŸ‡µğŸ‡ª',
        'french polynesia': 'ğŸ‡µğŸ‡«',
        'papua new guinea': 'ğŸ‡µğŸ‡¬',
        'philippines': 'ğŸ‡µğŸ‡­',
        'pakistan': 'ğŸ‡µğŸ‡°',
        'poland': 'ğŸ‡µğŸ‡±',
        'st. pierre & miquelon': 'ğŸ‡µğŸ‡²',
        'pitcairn islands': 'ğŸ‡µğŸ‡³',
        'puerto rico': 'ğŸ‡µğŸ‡·',
        'palestinian territories': 'ğŸ‡µğŸ‡¸',
        'palestine': 'ğŸ‡µğŸ‡¸',
        'portugal': 'ğŸ‡µğŸ‡¹',
        'palau': 'ğŸ‡µğŸ‡¼',
        'paraguay': 'ğŸ‡µğŸ‡¾',
        
        # Q
        'qatar': 'ğŸ‡¶ğŸ‡¦',
        
        # R
        'rÃ©union': 'ğŸ‡·ğŸ‡ª',
        'reunion': 'ğŸ‡·ğŸ‡ª',
        'romania': 'ğŸ‡·ğŸ‡´',
        'serbia': 'ğŸ‡·ğŸ‡¸',
        'russia': 'ğŸ‡·ğŸ‡º',
        'russian federation': 'ğŸ‡·ğŸ‡º',
        'rwanda': 'ğŸ‡·ğŸ‡¼',
        
        # S
        'saudi arabia': 'ğŸ‡¸ğŸ‡¦',
        'solomon islands': 'ğŸ‡¸ğŸ‡§',
        'seychelles': 'ğŸ‡¸ğŸ‡¨',
        'sudan': 'ğŸ‡¸ğŸ‡©',
        'sweden': 'ğŸ‡¸ğŸ‡ª',
        'singapore': 'ğŸ‡¸ğŸ‡¬',
        'st. helena': 'ğŸ‡¸ğŸ‡­',
        'saint helena': 'ğŸ‡¸ğŸ‡­',
        'slovenia': 'ğŸ‡¸ğŸ‡®',
        'svalbard & jan mayen': 'ğŸ‡¸ğŸ‡¯',
        'slovakia': 'ğŸ‡¸ğŸ‡°',
        'sierra leone': 'ğŸ‡¸ğŸ‡±',
        'san marino': 'ğŸ‡¸ğŸ‡²',
        'senegal': 'ğŸ‡¸ğŸ‡³',
        'somalia': 'ğŸ‡¸ğŸ‡´',
        'suriname': 'ğŸ‡¸ğŸ‡·',
        'south sudan': 'ğŸ‡¸ğŸ‡¸',
        'sÃ£o tomÃ© & prÃ­ncipe': 'ğŸ‡¸ğŸ‡¹',
        'sao tome and principe': 'ğŸ‡¸ğŸ‡¹',
        'el salvador': 'ğŸ‡¸ğŸ‡»',
        'sint maarten': 'ğŸ‡¸ğŸ‡½',
        'syria': 'ğŸ‡¸ğŸ‡¾',
        'eswatini': 'ğŸ‡¸ğŸ‡¿',
        'swaziland': 'ğŸ‡¸ğŸ‡¿',
        
        # T
        'tristan da cunha': 'ğŸ‡¹ğŸ‡¦',
        'turks & caicos islands': 'ğŸ‡¹ğŸ‡¨',
        'chad': 'ğŸ‡¹ğŸ‡©',
        'french southern territories': 'ğŸ‡¹ğŸ‡«',
        'togo': 'ğŸ‡¹ğŸ‡¬',
        'thailand': 'ğŸ‡¹ğŸ‡­',
        'tajikistan': 'ğŸ‡¹ğŸ‡¯',
        'tokelau': 'ğŸ‡¹ğŸ‡°',
        'timor-leste': 'ğŸ‡¹ğŸ‡±',
        'east timor': 'ğŸ‡¹ğŸ‡±',
        'turkmenistan': 'ğŸ‡¹ğŸ‡²',
        'tunisia': 'ğŸ‡¹ğŸ‡³',
        'tonga': 'ğŸ‡¹ğŸ‡´',
        'tÃ¼rkiye': 'ğŸ‡¹ğŸ‡·',
        'turkey': 'ğŸ‡¹ğŸ‡·',
        'trinidad & tobago': 'ğŸ‡¹ğŸ‡¹',
        'trinidad and tobago': 'ğŸ‡¹ğŸ‡¹',
        'tuvalu': 'ğŸ‡¹ğŸ‡»',
        'taiwan': 'ğŸ‡¹ğŸ‡¼',
        'tanzania': 'ğŸ‡¹ğŸ‡¿',
        
        # U
        'ukraine': 'ğŸ‡ºğŸ‡¦',
        'uganda': 'ğŸ‡ºğŸ‡¬',
        'u.s. outlying islands': 'ğŸ‡ºğŸ‡²',
        'united nations': 'ğŸ‡ºğŸ‡³',
        'united states': 'ğŸ‡ºğŸ‡¸',
        'usa': 'ğŸ‡ºğŸ‡¸',
        'us': 'ğŸ‡ºğŸ‡¸',
        'uruguay': 'ğŸ‡ºğŸ‡¾',
        'uzbekistan': 'ğŸ‡ºğŸ‡¿',
        
        # V
        'vatican city': 'ğŸ‡»ğŸ‡¦',
        'st. vincent & grenadines': 'ğŸ‡»ğŸ‡¨',
        'saint vincent and the grenadines': 'ğŸ‡»ğŸ‡¨',
        'venezuela': 'ğŸ‡»ğŸ‡ª',
        'british virgin islands': 'ğŸ‡»ğŸ‡¬',
        'u.s. virgin islands': 'ğŸ‡»ğŸ‡®',
        'us virgin islands': 'ğŸ‡»ğŸ‡®',
        'vietnam': 'ğŸ‡»ğŸ‡³',
        'vanuatu': 'ğŸ‡»ğŸ‡º',
        
        # W
        'wallis & futuna': 'ğŸ‡¼ğŸ‡«',
        'samoa': 'ğŸ‡¼ğŸ‡¸',
        
        # X
        'kosovo': 'ğŸ‡½ğŸ‡°',
        
        # Y
        'yemen': 'ğŸ‡¾ğŸ‡ª',
        'mayotte': 'ğŸ‡¾ğŸ‡¹',
        
        # Z
        'south africa': 'ğŸ‡¿ğŸ‡¦',
        'zambia': 'ğŸ‡¿ğŸ‡²',
        'zimbabwe': 'ğŸ‡¿ğŸ‡¼',
    }
    
    return country_flags.get(country_clean, "")

@register.filter
def jsonify(value):
    """
    Convert a Python value to a JSON string for use in JavaScript.
    This is an alias for safe_json to match template usage.
    Usage: {{ data|jsonify }}
    """
    return safe_json(value) 